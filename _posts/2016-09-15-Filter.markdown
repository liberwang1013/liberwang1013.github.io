---
layout: post
title:  "Java Web 过滤器"
date:   2016-09-15 12:23:35 +0800
categories: jekyll update
---
#6 过滤器  
在之前的java web的用户登录模块开发中涉及到Filter的内容，今天自己对filter的一些看法写在这里，仅供自己未来可以翻阅
##6.1 What is filter?  
过滤器是用来改变HTTP请求、响应和Header信息的一段代码.Filter不会想Servlet直接对一个Request生成一个Response，而是修改或者适配一个Request或Response.   

- The accessing of a resource before a request to it is invoked.  
- The processing of the request for a resource before it is invoked.  
- The modifictaion of request headers and data by wrapping the request in customized versions of the request object.  
- The modification of response headers and responseR data by prividing customized versions of the response object.  
- The interception of an invocation of a resource after its call.  
- Actions on servlet, on groups of servlets, or static content by zeor, one, or more filters in a specifiable order.
###6.1.1 Filter Examples  
- Authentication filters
- Logging and auditing filters
- Image conversion filters
- Data compression filters
- Encryption filters
- Tokenizing filters
- Filters that trigger resource access evnets
- XSL/T filters that transform XML content
- MIME-type chan filters
- Caching filters

##6.2 Main Conceptes  
开发者通过实现*javax.servlet.Filter*这个接口实现一个Filter，和提供一个不带参数的构造函数。通过在web.xml文件里面添加*<filter\>*元素声明一个filter的实例。A filter of a collection of filters can be invocation by defining <filter-mapping\> elements in web.xml。
###6.2.1 Filter Lifecycle  
###6.2.2 Wrapping Requests and Responses  
过滤器的核心概念在于能够修改请求和响应中的某些字段的含义。利用这种方式，开发者不仅拥有Override Request和Response已有方法的能力，而且还可以提供一个xxx的api。举个栗子，  
为了实现这些功能，Web Application容器必须支持一下几个功能。如果filter调用了Filter chain的*doFilter*方法，Web容器必须要保证能够将Request和Response传递到下一个Filter或者在最后一个Filter的时候能够传递到目标资源，(并且保证传入了doFilter里面的对象是一致的)is the same object that was passed into the doFilter method by the calling filter.  
在一个RequestDispatcher.forward或RequestDispatcher.include
###6.2.3 Filter Environment   
Filter可以通过*<init-params\>*元素初始化。参数名和参数的值可以通过FilterConfig对象里面的*getInitParameter*和*getInitParameterNames*两个方法获取。此外，FilterConfig对象可以通过Web Application的ServletContext去加载资源、记录日志或者存储ServletContext的参数列表。Filter和目标Servlet或Filter Chain尾部的资源必须在同一thread里面。
###6.2.4 Condiguration of Filters in a Web Application
Filter的两种定义方式：
1. 通过标签@WebFilter；
2. 通过在web.xml里面添加<filter\>元素。通过第二种方式开发者需要定义：

- filter-name:  用来将filter映射到一个servlet或URL
- filter-class: 为容器指定filter的类型
- init-params:  filter的初始化参数

此外，开发者还可以指定icons，文字描述，或者a display name for manipulation。容器必须要给在web.xml中声明了的每个filter生成一个实例。如果开发者在web.xml中声明了两个实例，那么相同的filter就会生成两个实例。  
下面是一个filter声明的例子  
```
<filter>
	<filter-name>Image Filter</filter>
	<filter-class>com.ace.ImageServlet</filter>
</filter>
```
如果一个filter在web.xml里面声明了之后，the assembler users the <filter-mapping\> element to define servlets and static resources in the Web application to which the filter is to be applied. Filter可以通过*<servlet-name\>*元素和一个servlet关联。  
```
<filter-mapping>
	<filter-name>Image Filter</filter-name>
	<servlet-name>ImageServlet</servlet-name>
</filter-mapping>
```

filter可以通过*<url-pattern\>*元素一组servlet或静态资源相关联  
```
<filter-mapping>
	<filter-name>Logging Filter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>
```
上面的Logging Filter会对所有的servlets和静态内容页面起作用，因为"/\*"匹配了所有的URI。  
在用*<url-pattern\>*处理*<filter-mapping\>*元素的时候，
###6.2.5 Filters and the RequestDispatcher
